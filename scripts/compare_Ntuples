#!/usr/bin/env python
"""A script compare Histograms saved in ROOT Files
The first file is treated as reference!
"""
from __future__ import print_function
from __future__ import division

import ROOT
ROOT.gROOT.SetBatch()

from root_plot_utils import AtlasStyle
from root_plot_utils.ploter import Ploter

if __name__ == "__main__":
    import argparse
    import os
    import yaml

    parser = argparse.ArgumentParser(description='Compare Histograms')
    add_arg = parser.add_argument
    add_arg('config_name', type=str, help='config file')
    add_arg('outdir', type=str, help='output directory')
    add_arg('-n', '--normalize', action='store_true', help='shape comparison')

    args = parser.parse_args()
    density = args.normalize

    assert(os.path.exists(args.config_name))
    with open(args.config_name) as f:
        if hasattr(yaml, 'FullLoader'):
            config = yaml.load(f, Loader=yaml.FullLoader)
        else:
            config = yaml.load(f)

    files = config['files']
    labels = config['labels']
    outdir = args.outdir

    ps = Ploter("Internal", 140)

    def read(file_name):
        histograms = []
        hist_names = []
        ifile = ROOT.TFile.Open(file_name, 'read')
        iterator = ROOT.TIter(ifile.GetListOfKeys())
        obj = iterator()
        while obj:
            hist_name = obj.GetName()
            hist = ifile.Get(hist_name)
            hist.SetDirectory(0)
            histograms.append(hist)
            hist_names.append(hist_name)
            obj = iterator()

        ifile.Close()
        return (histograms,hist_names)

    h0, h_names = read(files[0])
    all_hists = [h0] + [read(file_name)[0] for file_name in files[1:]]
    n_hists = len(h0)
    print("total histograms {}".format(n_hists))
    print(len(all_hists), len(all_hists[1]))
    # each entry is histograms
    hists4cmp = [ [all_hists[x][ii] for x in range(len(files))] for ii in range(n_hists) ]

    plot_base_opt = {
        "ratio_range": (0.99, 1.01),
        "add_ratio": True,
        "out_folder": outdir,
        "no_fill": True,
        "density": density,
        "draw_option": "E1",
    }
    for h_name,hists in zip(h_names, hists4cmp):
        plot_base_opt.update(out_name=h_name)
        ps.compare_hists(hists, labels, **plot_base_opt)
