#!/usr/bin/env python
"""A script to compare Hmumu Ntuples
"""
from __future__ import print_function
from __future__ import division

import ROOT
from root_numpy import tree2array

import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt

import numpy as np
import itertools

import time

tree_name = "DiMuonNtuple"
def pairwise(iterable):
  """s -> (s0,s1), (s1,s2), (s2, s3), ..."""
  a, b = itertools.tee(iterable)
  next(b, None)
  return zip(a, b)

branches = [
    "McEventWeight",
    "Truth_Minv_MuMu",
    "Truth_Eta_Lead_Jet", "Truth_Phi_Lead_Jet", "Truth_PT_Lead_Jet",
    "Truth_Eta_Sub_Jet", "Truth_Phi_Sub_Jet", "Truth_PT_Sub_Jet",
    "Truth_Eta_Lead_Muon", "Truth_Phi_Lead_Muon", "Truth_PT_Lead_Muon",
    "Truth_Eta_Sub_Muon", "Truth_Phi_Sub_Muon", "Truth_PT_Sub_Muon",
    "Truth_Charge_Lead_Muon",
    "Muons_Charge_Lead",
    "Muons_CosThetaStar",
    "Muons_Eta_Lead", "Muons_Phi_Lead", "Muons_PT_Lead",
    "Muons_Eta_Sub", "Muons_Phi_Sub", "Muons_PT_Sub",
    "Leading_Jet_Eta", "Leading_Jet_Phi", "Leading_Jet_PT",
    "Sub_Jet_Eta", "Sub_Jet_Phi", "Sub_Jet_PT",
    "Event_MET", "Event_MET_phi",
]

def process_file(file_name):
    n_workers = 4

    rfile = ROOT.TFile.Open(file_name)
    tree = rfile.Get(tree_name)

    nentries = tree.GetEntries()
    time_now = time.time()
    # event_info is 1-dimention array, each record is np.void
    event_info = tree2array(tree, branches=branches)
    time_past = time.time() - time_now
    print("read {} events costs: {:.1f} seconds".format(nentries, time_past))

    # get Luminosity
    lumi = rfile.Get("lumi").GetBinContent(1)
    print("{} with lumi {:.2f}".format(file_name,lumi))
    rfile.Close()
    return (event_info, lumi)


def plot(hists, weights, luminosities,
         xlabel, ylabel, tag_names, outname, **plot_options):
    if len(hists) < 2:
        return False

    plt.clf()
    fig, (ax0, ax1) = plt.subplots(2, 1, figsize=(10, 12), sharex=True, gridspec_kw={'height_ratios':[4, 1]})
    fig.subplots_adjust(hspace=0)

    tot = hists[0]
    base_lumi = luminosities[0]
    try:
        val_tot, bins, _ = ax0.hist(tot, weights=weights[0],
                                    label=tag_names[0], **plot_options)
    except ValueError:
        print(xlabel)
        return

    val_sels = []
    for ih, sel in enumerate(hists[1:]):
        scale = base_lumi/luminosities[ih+1]
        try:
            val_sel, bins, _ = ax0.hist(sel, weights=np.array(weights[ih+1])*scale,
                                        label=tag_names[ih+1], **plot_options)
        except ValueError:
            print(tag_names[ih+1], outname)
            val_sel = [0.]*len(val_tot)

        val_sels.append(val_sel)

    ax0.legend(fontsize=16)
    ax0.set_ylabel(ylabel, fontsize=16)

    xvals = [0.5*(x[0]+x[1]) for x in pairwise(bins)][1:]
    ratios = []
    for ih,val_sel in enumerate(val_sels):
        ratio = [x/y if y != 0 else 0. for x,y in zip(val_sel, val_tot)][:-1]
        ax1.plot(xvals, ratio, 'o', label=tag_names[ih+1], lw=2)

    ax1.set_xlabel(xlabel, fontsize=16)
    ax1.set_ylabel('ratio', fontsize=16)

    plt.savefig(outname)

def get_hist_opt(hist_name):
    bins, label, islog = None, None, None
    if "PT" in hist_name:
        islog = False
        if "Jet" in hist_name:
            bins = np.linspace(20, 320, 100)
            label = "Events / 3 GeV"
        else:
            bins = np.linspace(10, 110, 100)
            label = "Events / 1 GeV"

    if "Eta" in hist_name:
        islog = False
        if "Jet" in hist_name:
            bins = np.linspace(-5, 5, 51)
        else:
            bins = np.linspace(-3, 3, 31)
        label = "Events / 0.2"

    if "Phi" in hist_name:
        islog = False
        bins = np.linspace(-3.2, 3.2, 65)
        label = "Events / 0.1"

    if "Charge" in hist_name:
        islog = False
        bins = np.linspace(-1.5, 1.5, 3)
        label = "Events"

    if "Minv" in hist_name:
        islog = True
        bins = np.linspace(55, 165, 110)
        label = "Events / 1 GeV"

    if "MET" in hist_name:
        islog = False
        bins = np.linspace(0, 150, 30)
        label = "Events / 5 GeV"

    return (bins, label, islog)


if __name__ == "__main__":
    import argparse
    import os
    import yaml

    parser = argparse.ArgumentParser(description='Compare two Hmumu Ntuples')
    add_arg = parser.add_argument
    add_arg('config_name', type=str, help='config file')

    args = parser.parse_args()

    assert(os.path.exists(args.config_name))
    with open(args.config_name) as f:
        if hasattr(yaml, 'FullLoader'):
            config = yaml.load(f, Loader=yaml.FullLoader)
        else:
            config = yaml.load(f)

    out_dir = config['outdir']
    try:
        os.makedirs(out_dir)
    except:
        pass

    input_config = config['inputs']
    tag_names = input_config.keys()
    histograms = []
    luminosities = []
    for tag_name in tag_names:
        file_name = input_config[tag_name]
        res = process_file(file_name)
        histograms.append(res[0])
        luminosities.append(res[1])

    ## get branch names
    file_name = input_config[tag_names[0]]
    n_obs = len(branches)
    print("total {} observables".format(n_obs))
    for branch_name in branches:
        if branch_name == "McEventWeight":
            continue
        hists = [histograms[x][branch_name].tolist() for x in range(len(tag_names))]
        weights = [histograms[x]["McEventWeight"].tolist() for x in range(len(tag_names))]

        hist_name = branch_name
        outname = os.path.join(out_dir, "{}.pdf".format(hist_name))
        bins, ylabel, islog = get_hist_opt(hist_name)
        plot_options = {
            'bins': bins,
            'histtype': 'step',
            'lw': 2,
            'log': islog,
            'density': False
        }
        xlabel = hist_name
        ylabel = ylabel
        plot(hists, weights, luminosities, xlabel, ylabel, tag_names, outname, **plot_options)
